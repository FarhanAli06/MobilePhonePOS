@{
    ViewData["Title"] = "Point of Sale (POS)";
}

<div class="container-fluid">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1">Point of Sale (POS)</h2>
            <p class="text-muted mb-0">Process sales and manage transactions</p>
        </div>
        <div class="d-flex gap-2">
            <button type="button" class="btn btn-outline-secondary" onclick="clearCart()">
                <i class="fas fa-trash"></i> Clear Cart
            </button>
            <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#salesHistoryModal">
                <i class="fas fa-history"></i> Sales History
            </button>
        </div>
    </div>

    <div class="row">
        <!-- Product Selection -->
        <div class="col-md-8">
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Product Selection</h5>
                    <div class="d-flex gap-2">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="wholesaleModeToggle">
                            <label class="form-check-label" for="wholesaleModeToggle">
                                Wholesale Mode
                            </label>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Search and Filters -->
                    <div class="row g-3 mb-3">
                        <div class="col-md-4">
                            <label for="productSearch" class="form-label">Search Products</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-search"></i></span>
                                <input type="text" class="form-control" id="productSearch" placeholder="Search by name, model, IMEI...">
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label for="categoryFilter" class="form-label">Category</label>
                            <select id="categoryFilter" class="form-select select2-dropdown">
                                <option value="">All Categories</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="brandFilter" class="form-label">Brand</label>
                            <select id="brandFilter" class="form-select select2-dropdown">
                                <option value="">All Brands</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">&nbsp;</label>
                            <button type="button" class="btn btn-primary w-100" onclick="searchProducts()">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </div>
                    
                    <!-- Device Category and Model Filters -->
                    <div class="row g-3 mb-4">
                        <div class="col-md-4">
                            <label for="deviceCategoryFilter" class="form-label">Device Category</label>
                            <select id="deviceCategoryFilter" class="form-select select2-dropdown">
                                <option value="">All Device Categories</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="deviceModelFilter" class="form-label">Device Model</label>
                            <select id="deviceModelFilter" class="form-select select2-dropdown" disabled>
                                <option value="">All Models</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">&nbsp;</label>
                            <button type="button" class="btn btn-outline-secondary w-100" onclick="clearFilters()">
                                <i class="fas fa-times"></i> Clear Filters
                            </button>
                        </div>
                    </div>

                    <!-- Products Grid -->
                    <div class="row" id="productsGrid">
                        <!-- Products will be loaded here -->
                    </div>

                    <!-- Pagination -->
                    <nav aria-label="Products pagination" class="mt-4">
                        <ul class="pagination justify-content-center" id="productsPagination">
                            <!-- Pagination will be generated here -->
                        </ul>
                    </nav>
                </div>
            </div>
        </div>

        <!-- Shopping Cart -->
        <div class="col-md-4">
            <div class="card sticky-top">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Shopping Cart</h5>
                    <span class="badge bg-primary" id="cartItemCount">0 items</span>
                </div>
                <div class="card-body">
                    <!-- Customer Selection -->
                    <div class="mb-3">
                        <label for="customerSelect" class="form-label">Customer</label>
                        <div class="input-group">
                            <select id="customerSelect" class="form-select select2-dropdown">
                                <option value="">Select Customer</option>
                            </select>
                            <button type="button" class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#addCustomerModal">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Cart Items -->
                    <div id="cartItems" class="mb-3" style="max-height: 300px; overflow-y: auto;">
                        <div class="text-center text-muted py-4">
                            <i class="fas fa-shopping-cart fa-3x mb-3"></i>
                            <p>Your cart is empty</p>
                        </div>
                    </div>

                    <!-- Cart Summary -->
                    <div class="border-top pt-3">
                        <div class="d-flex justify-content-between mb-2">
                            <span>Subtotal:</span>
                            <span id="cartSubtotal">$0.00</span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Tax (8.5%):</span>
                            <span id="cartTax">$0.00</span>
                        </div>
                        <div class="d-flex justify-content-between mb-3 fw-bold fs-5">
                            <span>Total:</span>
                            <span id="cartTotal">$0.00</span>
                        </div>

                        <!-- Payment Method -->
                        <div class="mb-3">
                            <label for="paymentMethod" class="form-label">Payment Method</label>
                            <select id="paymentMethod" class="form-select">
                                <option value="cash">Cash</option>
                                <option value="card">Credit/Debit Card</option>
                                <option value="check">Check</option>
                                <option value="store_credit">Store Credit</option>
                            </select>
                        </div>

                        <!-- Action Buttons -->
                        <div class="d-grid gap-2">
                            <button type="button" class="btn btn-success btn-lg" id="checkoutBtn" onclick="processCheckout()" disabled>
                                <i class="fas fa-credit-card"></i> Process Payment
                            </button>
                            <button type="button" class="btn btn-outline-primary" onclick="saveQuote()">
                                <i class="fas fa-save"></i> Save as Quote
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Customer Modal -->
<div class="modal fade" id="addCustomerModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Customer</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="addCustomerForm">
                <div class="modal-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="customerFirstName" class="form-label">First Name *</label>
                            <input type="text" class="form-control" id="customerFirstName" required>
                        </div>
                        <div class="col-md-6">
                            <label for="customerLastName" class="form-label">Last Name *</label>
                            <input type="text" class="form-control" id="customerLastName" required>
                        </div>
                        <div class="col-md-6">
                            <label for="customerPhone" class="form-label">Phone *</label>
                            <input type="tel" class="form-control" id="customerPhone" required>
                        </div>
                        <div class="col-md-6">
                            <label for="customerEmail" class="form-label">Email</label>
                            <input type="email" class="form-control" id="customerEmail">
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Customer</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Sales History Modal -->
<div class="modal fade" id="salesHistoryModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Sales History</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="table-responsive">
                    <table id="salesHistoryTable" class="table table-striped">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Invoice #</th>
                                <th>Customer</th>
                                <th>Items</th>
                                <th>Total</th>
                                <th>Payment</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Sales history will be loaded here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Checkout Success Modal -->
<div class="modal fade" id="checkoutSuccessModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">
                    <i class="fas fa-check-circle"></i> Sale Completed!
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center">
                <div class="mb-3">
                    <h4 id="invoiceNumber">Invoice #INV-001</h4>
                    <p class="text-muted">Transaction completed successfully</p>
                </div>
                <div class="d-grid gap-2">
                    <button type="button" class="btn btn-primary" onclick="printReceipt()">
                        <i class="fas fa-print"></i> Print Receipt
                    </button>
                    <button type="button" class="btn btn-outline-secondary" onclick="emailReceipt()">
                        <i class="fas fa-envelope"></i> Email Receipt
                    </button>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" data-bs-dismiss="modal" onclick="startNewSale()">
                    <i class="fas fa-plus"></i> New Sale
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
let cart = [];
let customers = [];
let products = [];
let isWholesaleMode = false;
const TAX_RATE = 0.085; // 8.5%

$(document).ready(function() {
    // Initialize POS system
    initializePOS();
    
    // Load initial data
    loadCustomers();
    loadBrands();
    loadCategories();
    loadDeviceCategories();
    loadProducts();
    
    // Setup cascading dropdowns
    setupCascadingDropdowns();
    
    // Event handlers
    $('#wholesaleModeToggle').change(function() {
        isWholesaleMode = $(this).is(':checked');
        updateCartDisplay();
        loadProducts(); // Reload products with new pricing
    });
    
    $('#productSearch').on('input', debounce(searchProducts, 300));
    
    $('#addCustomerForm').submit(function(e) {
        e.preventDefault();
        addNewCustomer();
    });
});

function initializePOS() {
    // Initialize Select2 for dropdowns
    $('#customerSelect, #categoryFilter, #brandFilter, #paymentMethod').select2({
        theme: 'bootstrap-5',
        width: '100%'
    });
    
    // Update cart display
    updateCartDisplay();
}

function loadCustomers() {
    $.get('/Sale/GetCustomers', function(response) {
        if (response.success) {
            customers = response.data;
            const $select = $('#customerSelect');
            $select.empty().append('<option value="">Select Customer</option>');
            
            response.data.forEach(customer => {
                $select.append(`<option value="${customer.id}">${customer.text}</option>`);
            });
            
            $select.select2('destroy').select2({
                theme: 'bootstrap-5',
                width: '100%',
                placeholder: 'Search customers...',
                allowClear: true
            });
        } else {
            showToast('error', 'Failed to load customers');
        }
    }).fail(function() {
        showToast('error', 'Error loading customers');
    });
}

function loadBrands() {
    $.get('/Sale/GetBrands', function(response) {
        if (response.success) {
            const $select = $('#brandFilter');
            $select.empty().append('<option value="">All Brands</option>');
            
            response.data.forEach(brand => {
                $select.append(`<option value="${brand.id}">${brand.name}</option>`);
            });
            
            $select.select2({
                theme: 'bootstrap-5',
                width: '100%',
                placeholder: 'Select Brand...',
                allowClear: true
            });
        } else {
            showToast('error', 'Failed to load brands');
        }
    }).fail(function() {
        showToast('error', 'Error loading brands');
    });
}

function searchProducts() {
    const search = $('#productSearch').val();
    const brandId = $('#brandFilter').val();
    const categoryId = $('#categoryFilter').val();
    loadProducts(1, search, brandId, categoryId);
}

function loadProducts(page = 1, searchTerm = '', brandId = '', categoryId = '') {
    const deviceCategoryId = $('#deviceCategoryFilter').val();
    const deviceModelId = $('#deviceModelFilter').val();
    
    $.get('/Sale/GetProducts', {
        page: page,
        searchTerm: searchTerm,
        brandId: brandId,
        categoryId: categoryId,
        deviceCategoryId: deviceCategoryId,
        deviceModelId: deviceModelId,
        isWholesale: isWholesaleMode
    }, function(response) {
        if (response.success) {
            products = response.data.products;
            displayProducts(products);
            updatePagination(response.data.totalPages, page);
        } else {
            showToast('error', 'Failed to load products');
        }
    }).fail(function() {
        showToast('error', 'Error loading products');
    });
}

function loadCategories() {
    $.get('/Sale/GetCategories', function(response) {
        if (response.success) {
            const $select = $('#categoryFilter');
            $select.empty().append('<option value="">All Categories</option>');
            
            response.data.forEach(function(category) {
                $select.append(`<option value="${category.id}">${category.name}</option>`);
            });
            
            // Initialize Select2
            if (typeof $.fn.select2 !== 'undefined') {
                $select.select2({
                    theme: 'bootstrap-5',
                    placeholder: 'All Categories',
                    allowClear: true
                });
            }
        }
    }).fail(function() {
        showToast('error', 'Error loading categories');
    });
}

function loadDeviceCategories() {
    $.get('/Sale/GetDeviceCategories', function(response) {
        if (response.success) {
            const $select = $('#deviceCategoryFilter');
            $select.empty().append('<option value="">All Device Categories</option>');
            
            response.data.forEach(function(category) {
                $select.append(`<option value="${category.id}">${category.name}</option>`);
            });
            
            // Initialize Select2
            if (typeof $.fn.select2 !== 'undefined') {
                $select.select2({
                    theme: 'bootstrap-5',
                    placeholder: 'All Device Categories',
                    allowClear: true
                });
            }
        }
    }).fail(function() {
        showToast('error', 'Error loading device categories');
    });
}

function loadDeviceModels(brandId, categoryId) {
    const $select = $('#deviceModelFilter');
    
    if (!brandId || !categoryId) {
        $select.empty().append('<option value="">All Models</option>').prop('disabled', true);
        if (typeof $.fn.select2 !== 'undefined') {
            $select.select2({
                theme: 'bootstrap-5',
                placeholder: 'All Models',
                allowClear: true
            });
        }
        return;
    }
    
    $.get('/Sale/GetDeviceModels', { brandId: brandId, categoryId: categoryId }, function(response) {
        if (response.success) {
            $select.empty().append('<option value="">All Models</option>').prop('disabled', false);
            
            response.data.forEach(function(model) {
                $select.append(`<option value="${model.id}">${model.name}</option>`);
            });
            
            // Initialize Select2
            if (typeof $.fn.select2 !== 'undefined') {
                $select.select2({
                    theme: 'bootstrap-5',
                    placeholder: 'All Models',
                    allowClear: true
                });
            }
        }
    }).fail(function() {
        showToast('error', 'Error loading device models');
    });
}

function setupCascadingDropdowns() {
    // Brand change -> load models for selected brand and category
    $('#brandFilter').change(function() {
        const brandId = $(this).val();
        const categoryId = $('#deviceCategoryFilter').val();
        loadDeviceModels(brandId, categoryId);
    });
    
    // Device Category change -> load models for selected brand and category
    $('#deviceCategoryFilter').change(function() {
        const categoryId = $(this).val();
        const brandId = $('#brandFilter').val();
        loadDeviceModels(brandId, categoryId);
    });
}

function displayProducts(productsToShow) {
    const $grid = $('#productsGrid');
    $grid.empty();
    
    if (productsToShow.length === 0) {
        $grid.html('<div class="col-12 text-center py-4"><p class="text-muted">No products found</p></div>');
        return;
    }
    
    productsToShow.forEach(product => {
        const price = isWholesaleMode ? product.wholesalePrice : product.price;
        const priceLabel = isWholesaleMode ? 'Wholesale' : 'Retail';
        
        const productCard = `
            <div class="col-md-6 col-lg-4 mb-3">
                <div class="card h-100 product-card" onclick="addToCart(${product.id})">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <h6 class="card-title mb-0">${product.name}</h6>
                            <span class="badge bg-${product.stock > 0 ? 'success' : 'danger'}">${product.stock} in stock</span>
                        </div>
                        <p class="card-text text-muted small mb-2">${product.brand} - ${product.model}</p>
                        <p class="card-text small mb-2">${product.description}</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <span class="h5 text-primary mb-0">$${price.toFixed(2)}</span>
                                <small class="text-muted d-block">${priceLabel} Price</small>
                            </div>
                            <button type="button" class="btn btn-primary btn-sm" ${product.stock === 0 ? 'disabled' : ''}>
                                <i class="fas fa-plus"></i> Add
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        $grid.append(productCard);
    });
}

function clearFilters() {
    $('#productSearch').val('');
    $('#categoryFilter').val('').trigger('change');
    $('#brandFilter').val('').trigger('change');
    $('#deviceCategoryFilter').val('').trigger('change');
    $('#deviceModelFilter').val('').trigger('change').prop('disabled', true);
    searchProducts();
}

function addToCart(productId) {
    // Find product in allProducts array (from API)
    const product = allProducts.find(p => p.id === productId);
    if (!product || product.stock === 0) {
        showToast('warning', 'Product not available or out of stock');
        return;
    }
    
    const existingItem = cart.find(item => item.id === productId);
    
    if (existingItem) {
        if (existingItem.quantity < product.stock) {
            existingItem.quantity++;
            existingItem.totalPrice = existingItem.quantity * existingItem.unitPrice;
        } else {
            showToast('warning', 'Not enough stock available');
            return;
        }
    } else {
        const unitPrice = isWholesaleMode ? (product.wholesalePrice || product.price) : product.price;
        cart.push({
            id: product.id,
            name: product.name,
            brand: product.brand,
            category: product.category,
            sku: product.sku,
            unitPrice: unitPrice,
            quantity: 1,
            totalPrice: unitPrice,
            stock: product.stock,
            type: product.type
        });
    }
    
    updateCartDisplay();
    showToast('success', `${product.name} added to cart`);
}

function removeFromCart(productId) {
    cart = cart.filter(item => item.id !== productId);
    updateCartDisplay();
}

function updateQuantity(productId, newQuantity) {
    const item = cart.find(item => item.id === productId);
    if (!item) return;
    
    if (newQuantity <= 0) {
        removeFromCart(productId);
    } else if (newQuantity <= item.maxStock) {
        item.quantity = newQuantity;
        updateCartDisplay();
    } else {
        showToast('warning', 'Not enough stock available');
    }

function updateCartDisplay() {
    const $cartItems = $('#cartItems');
    const $cartItemCount = $('#cartItemCount');
    const $cartSubtotal = $('#cartSubtotal');
    const $cartTax = $('#cartTax');
    const $cartTotal = $('#cartTotal');
    const $checkoutBtn = $('#checkoutBtn');
    
    if (cart.length === 0) {
        $cartItems.html(`
            <div class="text-center text-muted py-4">
                <i class="fas fa-shopping-cart fa-3x mb-3"></i>
                <p>Your cart is empty</p>
            </div>
        `);
        $cartItemCount.text('0 items');
        $cartSubtotal.text('$0.00');
        $cartTax.text('$0.00');
        $cartTotal.text('$0.00');
        $checkoutBtn.prop('disabled', true);
        return;
    }
    
    let cartHtml = '';
    let subtotal = 0;
    
    cart.forEach(item => {
        const itemTotal = item.price * item.quantity;
        subtotal += itemTotal;
        
        cartHtml += `
            <div class="cart-item mb-3 p-2 border rounded">
                <div class="d-flex justify-content-between align-items-start mb-2">
                    <div class="flex-grow-1">
                        <h6 class="mb-1">${item.name}</h6>
                        <small class="text-muted">${item.brand} - ${item.model}</small>
                    </div>
                    <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeFromCart(${item.id})">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="d-flex justify-content-between align-items-center">
                    <div class="input-group" style="width: 100px;">
                        <button type="button" class="btn btn-outline-secondary btn-sm" onclick="updateQuantity(${item.id}, ${item.quantity - 1})">-</button>
                        <input type="text" class="form-control form-control-sm text-center" value="${item.quantity}" readonly>
                        <button type="button" class="btn btn-outline-secondary btn-sm" onclick="updateQuantity(${item.id}, ${item.quantity + 1})">+</button>
                    </div>
                    <span class="fw-bold">$${itemTotal.toFixed(2)}</span>
                </div>
            </div>
        `;
    });
    
    const tax = subtotal * TAX_RATE;
    const total = subtotal + tax;
    
    $cartItems.html(cartHtml);
    $cartItemCount.text(`${cart.reduce((sum, item) => sum + item.quantity, 0)} items`);
    $cartSubtotal.text(`$${subtotal.toFixed(2)}`);
    $cartTax.text(`$${tax.toFixed(2)}`);
    $cartTotal.text(`$${total.toFixed(2)}`);
    $checkoutBtn.prop('disabled', false);
}

function clearCart() {
    cart = [];
    updateCartDisplay();
    showToast('info', 'Cart cleared');
}

function processCheckout() {
    const customerId = $('#customerSelect').val();
    const paymentMethod = $('#paymentMethod').val();
    
    if (!customerId) {
        showToast('warning', 'Please select a customer');
        return;
    }
    
    if (cart.length === 0) {
        showToast('warning', 'Cart is empty');
        return;
    }
    
    if (!paymentMethod) {
        showToast('warning', 'Please select a payment method');
        return;
    }
    
    // Prepare sale data
    const saleData = {
        customerId: parseInt(customerId),
        paymentMethod: paymentMethod,
        items: cart.map(item => ({
            productId: item.id,
            productType: item.type,
            quantity: item.quantity,
            unitPrice: item.unitPrice,
            totalPrice: item.totalPrice
        })),
        subTotal: calculateSubtotal(),
        taxAmount: calculateTax(),
        totalAmount: calculateTotal()
    };
    
    // Show loading state
    const $checkoutBtn = $('#checkoutBtn');
    const originalText = $checkoutBtn.html();
    $checkoutBtn.html('<i class="fas fa-spinner fa-spin"></i> Processing...').prop('disabled', true);
    
    // Process the sale
    $.ajax({
        url: '/Sale/ProcessSale',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(saleData),
        success: function(response) {
            if (response.success) {
                $('#invoiceNumber').text(`Invoice #${response.invoiceNumber}`);
                $('#checkoutSuccessModal').modal('show');
                
                // Clear cart after successful checkout
                cart = [];
                updateCartDisplay();
                $('#customerSelect').val('').trigger('change');
                $('#paymentMethod').val('cash').trigger('change');
                
                showToast('success', 'Sale processed successfully!');
            } else {
                showToast('error', response.message || 'Failed to process sale');
            }
        },
        error: function() {
            showToast('error', 'Error processing sale. Please try again.');
        },
        complete: function() {
            // Restore button state
            $checkoutBtn.html(originalText).prop('disabled', false);
        }
    });
}

function addNewCustomer() {
    const customerData = {
        firstName: $('#customerFirstName').val().trim(),
        lastName: $('#customerLastName').val().trim(),
        phone: $('#customerPhone').val().trim(),
        email: $('#customerEmail').val().trim()
    };
    
    // Validate required fields
    if (!customerData.firstName || !customerData.lastName || !customerData.phone) {
        showToast('warning', 'Please fill in all required fields');
        return;
    }
    
    // Show loading state
    const $saveBtn = $('#saveCustomerBtn');
    const originalText = $saveBtn.html();
    $saveBtn.html('<i class="fas fa-spinner fa-spin"></i> Saving...').prop('disabled', true);
    
    // Save customer via API
    $.ajax({
        url: '/Sale/AddCustomer',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(customerData),
        success: function(response) {
            if (response.success) {
                $('#addCustomerModal').modal('hide');
                showToast('success', 'Customer added successfully');
                $('#addCustomerForm')[0].reset();
                loadCustomers(); // Reload customers
                
                // Auto-select the new customer
                setTimeout(() => {
                    $('#customerSelect').val(response.data.id).trigger('change');
                }, 500);
            } else {
                showToast('error', response.message || 'Failed to add customer');
            }
        },
        error: function(xhr, status, error) {
            console.error('Error adding customer:', error);
            showToast('error', 'Error adding customer. Please try again.');
        },
        complete: function() {
            // Restore button state
            $saveBtn.html(originalText).prop('disabled', false);
        }
    });
}

function saveQuote() {
    if (cart.length === 0) {
        showToast('warning', 'Cart is empty');
        return;
    }
    
    // Here you would save the quote
    showToast('success', 'Quote saved successfully');
}

function startNewSale() {
    clearCart();
    $('#customerSelect').val('').trigger('change');
    $('#paymentMethod').val('cash').trigger('change');
    $('#productSearch').val('');
    loadProducts();
}

function printReceipt() {
    // Here you would generate and print the receipt
    showToast('info', 'Receipt sent to printer');
}

function emailReceipt() {
    // Here you would email the receipt
    showToast('info', 'Receipt emailed to customer');
}

function showToast(type, message) {
    const toast = $(`
        <div class="toast align-items-center text-white bg-${type === 'success' ? 'success' : type === 'warning' ? 'warning' : type === 'error' ? 'danger' : 'info'} border-0" role="alert">
            <div class="d-flex">
                <div class="toast-body">${message}</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        </div>
    `);
    
    $('body').append(toast);
    const bsToast = new bootstrap.Toast(toast[0]);
    bsToast.show();
    
    setTimeout(() => toast.remove(), 5000);
}

function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Add CSS for product cards
const style = document.createElement('style');
style.textContent = `
    .product-card {
        cursor: pointer;
        transition: transform 0.2s, box-shadow 0.2s;
    }
    .product-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    .cart-item {
        background-color: #f8f9fa;
    }
`;
document.head.appendChild(style);
</script>
}