@{
    ViewData["Title"] = "Inventory Management";
    var currentShopId = ViewBag.CurrentShopId ?? 1;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="fas fa-boxes me-2"></i>Inventory Management</h2>
    <div>
        <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#createInventoryModal">
            <i class="fas fa-plus me-2"></i>Add Inventory Item
        </button>
        <button type="button" class="btn btn-info" onclick="adjustStock()">
            <i class="fas fa-exchange-alt me-2"></i>Stock Adjustment
        </button>
        <button type="button" class="btn btn-warning" onclick="testAjaxCall()">
            <i class="fas fa-bug me-2"></i>Test API Call
        </button>
    </div>
</div>

<!-- Filter Section -->
<div class="card mb-4">
    <div class="card-body">
        <h5 class="card-title">Filters</h5>
        <form id="inventoryFilterForm" class="row g-3">
            <div class="col-md-3">
                <label class="form-label">Device Type</label>
                <select class="form-select" name="deviceType">
                    <option value="">All Types</option>
                    <option value="Phone">Phone</option>
                    <option value="Laptop">Laptop</option>
                    <option value="Part">Part</option>
                    <option value="Accessories">Accessories</option>
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label">Stock Status</label>
                <select class="form-select" name="stockStatus">
                    <option value="">All Items</option>
                    <option value="in-stock">In Stock</option>
                    <option value="low-stock">Low Stock</option>
                    <option value="out-of-stock">Out of Stock</option>
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label">Category</label>
                <input type="text" class="form-control" name="category" placeholder="Enter category">
            </div>
            <div class="col-md-3">
                <label class="form-label">Search</label>
                <input type="text" class="form-control" name="search" placeholder="Search items...">
            </div>
            <div class="col-12">
                <button type="button" class="btn btn-primary" onclick="applyInventoryFilters()">
                    <i class="fas fa-search me-2"></i>Apply Filters
                </button>
                <button type="button" class="btn btn-secondary" onclick="clearInventoryFilters()">
                    <i class="fas fa-times me-2"></i>Clear
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Inventory Table -->
<div class="card">
    <div class="card-body">
        <table class="table table-striped" id="inventoryTable">
            <thead>
                <tr>
                    <th>Item Name</th>
                    <th>SKU</th>
                    <th>Brand</th>
                    <th>Category</th>
                    <th>Stock</th>
                    <th>Reorder Point</th>
                    <th>Cost Price</th>
                    <th>Retail Price</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <!-- Data will be loaded via AJAX -->
            </tbody>
        </table>
    </div>
</div>

<!-- Create Inventory Modal -->
<div class="modal fade" id="createInventoryModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Inventory Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="createInventoryForm">
                <div class="modal-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Item Name *</label>
                            <input type="text" class="form-control" name="name" required>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">SKU</label>
                            <input type="text" class="form-control" name="sku">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Brand *</label>
                            <select class="form-select" name="brandId" required>
                                <option value="">Select Brand</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Device Category *</label>
                            <select class="form-select" name="deviceCategoryId" required>
                                <option value="">Select Category</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Device Model *</label>
                            <select class="form-select" name="deviceModelId" required>
                                <option value="">Select Model</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Inventory Category *</label>
                            <select class="form-select" name="inventoryCategoryId" required>
                                <option value="">Select Category</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Initial Stock *</label>
                            <input type="number" class="form-control" name="currentStock" required min="0">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Reorder Point *</label>
                            <input type="number" class="form-control" name="reorderPoint" required min="0" value="5">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Cost Price *</label>
                            <input type="number" class="form-control" name="costPrice" required step="0.01" min="0">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Retail Price *</label>
                            <input type="number" class="form-control" name="retailPrice" required step="0.01" min="0">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Wholesale Price</label>
                            <input type="number" class="form-control" name="wholesalePrice" step="0.01" min="0">
                        </div>
                        <div class="col-12">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" name="description" rows="3"></textarea>
                        </div>
                        <div class="col-12">
                            <label class="form-label">Notes</label>
                            <textarea class="form-control" name="notes" rows="2"></textarea>
                        </div>
                        <div class="col-12">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="enableLowStockNotifications" checked>
                                <label class="form-check-label">Enable Low Stock Notifications</label>
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="isActive" checked>
                                <label class="form-check-label">Active</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-plus me-2"></i>Add Item
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Inventory Modal -->
<div class="modal fade" id="editInventoryModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Inventory Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="editInventoryForm">
                <input type="hidden" name="id" id="editItemId">
                <div class="modal-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Item Name *</label>
                            <input type="text" class="form-control" name="name" id="editName" required>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">SKU</label>
                            <input type="text" class="form-control" name="sku" id="editSku">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Brand *</label>
                            <select class="form-select" name="brandId" id="editBrandId" required>
                                <option value="">Select Brand</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Device Category *</label>
                            <select class="form-select" name="deviceCategoryId" id="editDeviceCategoryId" required>
                                <option value="">Select Category</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Device Model *</label>
                            <select class="form-select" name="deviceModelId" id="editDeviceModelId" required>
                                <option value="">Select Model</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Inventory Category *</label>
                            <select class="form-select" name="inventoryCategoryId" id="editInventoryCategoryId" required>
                                <option value="">Select Category</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Reorder Point *</label>
                            <input type="number" class="form-control" name="reorderPoint" id="editReorderPoint" required min="0">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Cost Price *</label>
                            <input type="number" class="form-control" name="costPrice" id="editCostPrice" required step="0.01" min="0">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Retail Price *</label>
                            <input type="number" class="form-control" name="retailPrice" id="editRetailPrice" required step="0.01" min="0">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Wholesale Price</label>
                            <input type="number" class="form-control" name="wholesalePrice" id="editWholesalePrice" step="0.01" min="0">
                        </div>
                        <div class="col-12">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" name="description" id="editDescription" rows="3"></textarea>
                        </div>
                        <div class="col-12">
                            <label class="form-label">Notes</label>
                            <textarea class="form-control" name="notes" id="editNotes" rows="2"></textarea>
                        </div>
                        <div class="col-12">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="enableLowStockNotifications" id="editEnableLowStockNotifications">
                                <label class="form-check-label">Enable Low Stock Notifications</label>
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="isActive" id="editIsActive">
                                <label class="form-check-label">Active</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i>Update Item
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let inventoryTable;
        const currentShopId = @currentShopId;

        $(document).ready(function() {
            // Initialize DataTable
            inventoryTable = $('#inventoryTable').DataTable({
                ajax: {
                    url: '/Inventories/GetInventoryItems',
                    type: 'GET',
                    dataSrc: function(json) {
                        console.log('AJAX Response:', json); // Debug log
                        if (json && json.success) {
                            return json.data;
                        } else {
                            console.error('Error loading inventory data:', json ? json.message : 'No response');
                            return [];
                        }
                    },
                    error: function(xhr, error, thrown) {
                        console.error('AJAX Error:', error, thrown);
                        console.error('Response:', xhr.responseText);
                        alert('Error loading inventory data: ' + error + '. Please check console for details.');
                    }
                },
                columns: [
                    {
                        data: 'name',
                        render: function(data, type, row) {
                            let html = '<strong>' + data + '</strong>';
                            if (row.description) {
                                html += '<br><small class="text-muted">' + row.description + '</small>';
                            }
                            return html;
                        }
                    },
                    { data: 'sku' },
                    { data: 'brandName' },
                    { data: 'inventoryCategoryName' },
                    {
                        data: 'currentStock',
                        render: function(data, type, row) {
                            const isLowStock = data <= row.reorderPoint;
                            return '<span class="' + (isLowStock ? 'text-danger fw-bold' : '') + '">' + data + '</span>';
                        }
                    },
                    { data: 'reorderPoint' },
                    {
                        data: 'costPrice',
                        render: function(data) {
                            return '$' + parseFloat(data).toFixed(2);
                        }
                    },
                    {
                        data: 'retailPrice',
                        render: function(data) {
                            return '$' + parseFloat(data).toFixed(2);
                        }
                    },
                    {
                        data: null,
                        render: function(data, type, row) {
                            if (row.currentStock <= 0) {
                                return '<span class="badge bg-danger">Out of Stock</span>';
                            } else if (row.currentStock <= row.reorderPoint) {
                                return '<span class="badge bg-warning">Low Stock</span>';
                            } else {
                                return '<span class="badge bg-success">In Stock</span>';
                            }
                        }
                    },
                    {
                        data: null,
                        orderable: false,
                        render: function(data, type, row) {
                            return `
                                <div class="btn-group btn-group-sm">
                                    <button type="button" class="btn btn-outline-primary" onclick="viewInventoryItem(${row.id})" title="View">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-warning" onclick="editInventoryItem(${row.id})" title="Edit">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-info" onclick="adjustItemStock(${row.id})" title="Adjust Stock">
                                        <i class="fas fa-exchange-alt"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-danger" onclick="deleteInventoryItem(${row.id})" title="Delete">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            `;
                        }
                    }
                ],
                order: [[0, 'asc']],
                pageLength: 25,
                responsive: true,
                language: {
                    emptyTable: "No inventory items found"
                },
                rowCallback: function(row, data) {
                    if (data.currentStock <= data.reorderPoint) {
                        $(row).addClass('table-warning');
                    }
                }
            });

            // Load dropdown data
            loadDropdownData();

            // Form submissions
            $('#createInventoryForm').on('submit', handleCreateSubmit);
            $('#editInventoryForm').on('submit', handleEditSubmit);
        });

        function loadDropdownData() {
            // Load brands, categories, models, etc. from lookup endpoints
            // This would need to be implemented based on your lookup controllers
            console.log('Loading dropdown data...');
        }

        function applyInventoryFilters() {
            const form = document.getElementById('inventoryFilterForm');
            const formData = new FormData(form);
            
            const filters = {
                stockStatus: formData.get('stockStatus'),
                search: formData.get('search')
            };

            // Apply search filter
            if (filters.search) {
                inventoryTable.search(filters.search).draw();
            } else {
                inventoryTable.search('').draw();
            }

            // For stock status, we'd need to reload with server-side filtering
            if (filters.stockStatus) {
                const url = '/Inventories/GetInventoryItems?stockStatus=' + filters.stockStatus;
                inventoryTable.ajax.url(url).load();
            } else {
                inventoryTable.ajax.url('/Inventories/GetInventoryItems').load();
            }
        }

        function clearInventoryFilters() {
            document.getElementById('inventoryFilterForm').reset();
            inventoryTable.search('').draw();
            inventoryTable.ajax.url('/Inventories/GetInventoryItems').load();
        }

        function viewInventoryItem(id) {
            // Implement view functionality
            console.log('Viewing inventory item:', id);
            alert('View functionality not yet implemented');
        }

        function editInventoryItem(id) {
            // Load item data and show edit modal
            $.get('/Inventories/GetInventoryItem/' + id)
                .done(function(response) {
                    if (response.success) {
                        populateEditForm(response.data);
                        $('#editInventoryModal').modal('show');
                    } else {
                        alert('Error loading item: ' + response.message);
                    }
                })
                .fail(function() {
                    alert('Error loading item data');
                });
        }

        function populateEditForm(data) {
            $('#editItemId').val(data.id);
            $('#editName').val(data.name);
            $('#editSku').val(data.sku);
            $('#editDescription').val(data.description);
            $('#editNotes').val(data.notes);
            $('#editReorderPoint').val(data.reorderPoint);
            $('#editCostPrice').val(data.costPrice);
            $('#editRetailPrice').val(data.retailPrice);
            $('#editWholesalePrice').val(data.wholesalePrice);
            $('#editBrandId').val(data.brandId);
            $('#editDeviceCategoryId').val(data.deviceCategoryId);
            $('#editDeviceModelId').val(data.deviceModelId);
            $('#editInventoryCategoryId').val(data.inventoryCategoryId);
            $('#editEnableLowStockNotifications').prop('checked', data.enableLowStockNotifications);
            $('#editIsActive').prop('checked', data.isActive);
        }

        function adjustItemStock(id) {
            // Implement stock adjustment functionality
            console.log('Adjusting stock for item:', id);
            alert('Stock adjustment functionality not yet implemented');
        }

        function deleteInventoryItem(id) {
            if (confirm('Are you sure you want to delete this inventory item?')) {
                $.ajax({
                    url: '/Inventories/DeleteInventoryItem/' + id,
                    type: 'DELETE',
                    success: function(response) {
                        if (response.success) {
                            alert(response.message);
                            inventoryTable.ajax.reload();
                        } else {
                            alert('Error: ' + response.message);
                        }
                    },
                    error: function() {
                        alert('Error deleting item');
                    }
                });
            }
        }

        function adjustStock() {
            console.log('Opening stock adjustment modal...');
            alert('Stock adjustment functionality not yet implemented');
        }

        function testAjaxCall() {
            console.log('Testing AJAX call to /Inventories/GetInventoryItems');
            $.ajax({
                url: '/Inventories/GetInventoryItems',
                type: 'GET',
                success: function(response) {
                    console.log('Test AJAX Success:', response);
                    alert('AJAX call successful! Check console for response. Items found: ' + (response.data ? response.data.length : 'N/A'));
                },
                error: function(xhr, error, thrown) {
                    console.error('Test AJAX Error:', error, thrown);
                    console.error('Response Text:', xhr.responseText);
                    console.error('Status:', xhr.status);
                    alert('AJAX call failed: ' + error + ' (Status: ' + xhr.status + ')');
                }
            });
        }

        function handleCreateSubmit(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const data = Object.fromEntries(formData.entries());
            
            // Convert checkboxes
            data.enableLowStockNotifications = formData.has('enableLowStockNotifications');
            data.isActive = formData.has('isActive');
            
            // Convert numbers
            data.brandId = parseInt(data.brandId);
            data.deviceCategoryId = parseInt(data.deviceCategoryId);
            data.deviceModelId = parseInt(data.deviceModelId);
            data.inventoryCategoryId = parseInt(data.inventoryCategoryId);
            data.currentStock = parseInt(data.currentStock);
            data.reorderPoint = parseInt(data.reorderPoint);
            data.costPrice = parseFloat(data.costPrice);
            data.retailPrice = parseFloat(data.retailPrice);
            data.wholesalePrice = parseFloat(data.wholesalePrice || 0);

            $.ajax({
                url: '/Inventories/CreateInventoryItem',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function(response) {
                    if (response.success) {
                        alert(response.message);
                        $('#createInventoryModal').modal('hide');
                        $('#createInventoryForm')[0].reset();
                        inventoryTable.ajax.reload();
                    } else {
                        alert('Error: ' + response.message);
                    }
                },
                error: function() {
                    alert('Error creating item');
                }
            });
        }

        function handleEditSubmit(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const data = Object.fromEntries(formData.entries());
            const id = data.id;
            
            // Convert checkboxes
            data.enableLowStockNotifications = formData.has('enableLowStockNotifications');
            data.isActive = formData.has('isActive');
            
            // Convert numbers
            data.brandId = parseInt(data.brandId);
            data.deviceCategoryId = parseInt(data.deviceCategoryId);
            data.deviceModelId = parseInt(data.deviceModelId);
            data.inventoryCategoryId = parseInt(data.inventoryCategoryId);
            data.reorderPoint = parseInt(data.reorderPoint);
            data.costPrice = parseFloat(data.costPrice);
            data.retailPrice = parseFloat(data.retailPrice);
            data.wholesalePrice = parseFloat(data.wholesalePrice || 0);

            delete data.id; // Remove id from data object

            $.ajax({
                url: '/Inventories/UpdateInventoryItem/' + id,
                type: 'PUT',
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function(response) {
                    if (response.success) {
                        alert(response.message);
                        $('#editInventoryModal').modal('hide');
                        inventoryTable.ajax.reload();
                    } else {
                        alert('Error: ' + response.message);
                    }
                },
                error: function() {
                    alert('Error updating item');
                }
            });
        }
    </script>
}

