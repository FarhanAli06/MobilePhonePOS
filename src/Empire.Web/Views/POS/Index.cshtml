@{
    ViewData["Title"] = "Point of Sale";
}

<style>
    .pos-container {
        height: calc(100vh - 100px);
        overflow: hidden;
    }
    
    .pos-search-section {
        background: #f8f9fa;
        padding: 20px;
        border-bottom: 2px solid #dee2e6;
    }
    
    .pos-main-content {
        display: flex;
        height: calc(100% - 120px);
    }
    
    .pos-products-section {
        flex: 1;
        padding: 20px;
        overflow-y: auto;
        border-right: 2px solid #dee2e6;
    }
    
    .pos-cart-section {
        width: 400px;
        display: flex;
        flex-direction: column;
        background: #f8f9fa;
    }
    
    .cart-header {
        padding: 20px;
        border-bottom: 2px solid #dee2e6;
    }
    
    .cart-items {
        flex: 1;
        overflow-y: auto;
        padding: 10px;
    }
    
    .cart-item {
        background: white;
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 8px;
        border: 1px solid #dee2e6;
    }
    
    .cart-item-header {
        display: flex;
        justify-content: space-between;
        align-items: start;
        margin-bottom: 10px;
    }
    
    .cart-item-name {
        font-weight: 600;
        font-size: 14px;
        flex: 1;
    }
    
    .cart-item-remove {
        color: #dc3545;
        cursor: pointer;
        font-size: 18px;
        margin-left: 10px;
    }
    
    .cart-item-details {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 10px;
    }
    
    .cart-item-quantity {
        display: flex;
        align-items: center;
        gap: 10px;
    }
    
    .qty-btn {
        width: 30px;
        height: 30px;
        border: 1px solid #dee2e6;
        background: white;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
    }
    
    .qty-btn:hover {
        background: #e9ecef;
    }
    
    .cart-item-price {
        font-size: 16px;
        font-weight: 600;
        color: #28a745;
    }
    
    .price-input {
        width: 100px;
        text-align: right;
        font-weight: 600;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        padding: 5px;
    }
    
    .price-input:focus {
        outline: none;
        border-color: #007bff;
    }
    
    .cart-summary {
        padding: 20px;
        border-top: 2px solid #dee2e6;
        background: white;
    }
    
    .summary-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
        font-size: 14px;
    }
    
    .summary-row.total {
        font-size: 20px;
        font-weight: bold;
        color: #28a745;
        padding-top: 10px;
        border-top: 2px solid #dee2e6;
    }
    
    .product-card {
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 15px;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .product-card:hover {
        border-color: #007bff;
        box-shadow: 0 2px 8px rgba(0,123,255,0.2);
    }
    
    .product-card-header {
        display: flex;
        justify-content: space-between;
        align-items: start;
        margin-bottom: 10px;
    }
    
    .product-name {
        font-weight: 600;
        font-size: 16px;
        color: #212529;
    }
    
    .product-type-badge {
        font-size: 11px;
        padding: 4px 8px;
    }
    
    .product-description {
        font-size: 13px;
        color: #6c757d;
        margin-bottom: 10px;
    }
    
    .product-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .product-price {
        font-size: 18px;
        font-weight: 700;
        color: #28a745;
    }
    
    .product-stock {
        font-size: 12px;
        color: #6c757d;
    }
    
    .filter-tabs {
        display: flex;
        gap: 10px;
        margin-bottom: 15px;
    }
    
    .filter-tab {
        padding: 8px 16px;
        border: 1px solid #dee2e6;
        background: white;
        border-radius: 20px;
        cursor: pointer;
        font-size: 14px;
        transition: all 0.2s;
    }
    
    .filter-tab:hover {
        background: #e9ecef;
    }
    
    .filter-tab.active {
        background: #007bff;
        color: white;
        border-color: #007bff;
    }
    
    .empty-cart {
        text-align: center;
        padding: 40px 20px;
        color: #6c757d;
    }
    
    .empty-cart i {
        font-size: 48px;
        margin-bottom: 15px;
        opacity: 0.5;
    }
    
    .no-products {
        text-align: center;
        padding: 40px 20px;
        color: #6c757d;
    }
</style>

<div class="pos-container">
    <!-- Search Section -->
    <div class="pos-search-section">
        <div class="row g-3">
            <div class="col-md-4">
                <div class="input-group input-group-lg">
                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                    <input type="text" class="form-control" id="searchInput" placeholder="Search by name, IMEI, repair number..." autocomplete="off">
                </div>
            </div>
            <div class="col-md-2">
                <select class="form-select form-select-lg no-select2" id="brandFilter">
                    <option value="">All Brands</option>
                </select>
            </div>
            <div class="col-md-3">
                <select class="form-select form-select-lg no-select2" id="categoryFilter">
                    <option value="">All Categories</option>
                </select>
            </div>
            <div class="col-md-3">
                <select class="form-select form-select-lg no-select2" id="modelFilter">
                    <option value="">All Models</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="pos-main-content">
        <!-- Products Section -->
        <div class="pos-products-section">
            <div class="filter-tabs">
                <button class="filter-tab active" data-type="" onclick="filterByType('')">
                    <i class="fas fa-th me-1"></i> All Items
                </button>
                <button class="filter-tab" data-type="device" onclick="filterByType('device')">
                    <i class="fas fa-mobile-alt me-1"></i> Devices
                </button>
                <button class="filter-tab" data-type="inventory" onclick="filterByType('inventory')">
                    <i class="fas fa-box me-1"></i> Inventory
                </button>
                <button class="filter-tab" data-type="repair" onclick="filterByType('repair')">
                    <i class="fas fa-wrench me-1"></i> Repairs
                </button>
            </div>

            <div id="productsContainer">
                <div class="no-products">
                    <i class="fas fa-search"></i>
                    <p>Search for products to add to cart</p>
                </div>
            </div>
        </div>

        <!-- Cart Section -->
        <div class="pos-cart-section">
            <div class="cart-header">
                <h4 class="mb-0">
                    <i class="fas fa-shopping-cart me-2"></i>Shopping Cart
                    <span class="badge bg-primary ms-2" id="cartCount">0</span>
                </h4>
            </div>

            <div class="cart-items" id="cartItems">
                <div class="empty-cart">
                    <i class="fas fa-shopping-cart"></i>
                    <p>Cart is empty<br><small>Add items to get started</small></p>
                </div>
            </div>

            <div class="cart-summary">
                <div class="summary-row">
                    <span>Subtotal:</span>
                    <span id="subtotal">$0.00</span>
                </div>
                <div class="summary-row">
                    <span>Tax (0%):</span>
                    <span id="tax">$0.00</span>
                </div>
                <div class="summary-row">
                    <span>Discount:</span>
                    <span id="discount">$0.00</span>
                </div>
                <div class="summary-row total">
                    <span>Total:</span>
                    <span id="total">$0.00</span>
                </div>
                
                <div class="mt-3">
                    <select class="form-select mb-2 no-select2" id="customerSelect">
                        <option value="">Select Customer *</option>
                    </select>
                    <select class="form-select mb-3 no-select2" id="paymentMethod">
                        <option value="Cash">Cash</option>
                        <option value="Card">Card</option>
                        <option value="Check">Check</option>
                        <option value="Other">Other</option>
                    </select>
                    <button class="btn btn-success btn-lg w-100" onclick="completeSale()">
                        <i class="fas fa-check me-2"></i>Complete Sale
                    </button>
                    <button class="btn btn-outline-secondary btn-sm w-100 mt-2" onclick="clearCart()">
                        <i class="fas fa-trash me-2"></i>Clear Cart
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Success Modal -->
<div class="modal fade" id="successModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">
                    <i class="fas fa-check-circle me-2"></i>Sale Completed
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center py-4">
                <i class="fas fa-check-circle text-success" style="font-size: 64px;"></i>
                <h4 class="mt-3">Sale Successful!</h4>
                <p class="mb-0">Invoice Number: <strong id="invoiceNumber"></strong></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="printInvoice()">
                    <i class="fas fa-print me-2"></i>Print Invoice
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    let cart = [];
    let products = [];
    let currentFilter = '';
    let searchTimeout;

    $(document).ready(function() {
        loadCustomers();
        loadBrands();
        loadCategories();
        
        // Search input handler
        $('#searchInput').on('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                searchProducts();
            }, 300);
        });

        // Brand filter - reload models when brand changes
        $('#brandFilter').on('change', function() {
            loadModels();
            searchProducts();
        });

        // Category filter - reload models when category changes
        $('#categoryFilter').on('change', function() {
            loadModels();
            searchProducts();
        });

        // Model filter
        $('#modelFilter').on('change', function() {
            searchProducts();
        });

        // Initial search - delay to ensure everything is loaded
        setTimeout(function() {
            searchProducts();
        }, 100);
    });

    function loadCustomers() {
        $.ajax({
            url: '@Url.Action("GetCustomers", "POS")',
            type: 'GET',
            success: function(response) {
                if (response.success) {
                    const select = $('#customerSelect');
                    select.empty();
                    select.append('<option value="">Select Customer *</option>');
                    
                    response.data.forEach(function(customer) {
                        select.append(`<option value="${customer.id}">${customer.text}</option>`);
                    });
                }
            },
            error: function(xhr) {
                console.error('Error loading customers:', xhr);
            }
        });
    }

    function loadBrands() {
        $.ajax({
            url: '@Url.Action("GetBrands", "POS")',
            type: 'GET',
            success: function(response) {
                if (response.success) {
                    const select = $('#brandFilter');
                    response.data.forEach(function(brand) {
                        select.append(`<option value="${brand.name}" data-id="${brand.id}">${brand.name}</option>`);
                    });
                }
            }
        });
    }

    function loadCategories() {
        $.ajax({
            url: '@Url.Action("GetCategories", "POS")',
            type: 'GET',
            success: function(response) {
                if (response.success) {
                    const select = $('#categoryFilter');
                    response.data.forEach(function(category) {
                        select.append(`<option value="${category.name}" data-id="${category.id}">${category.name}</option>`);
                    });
                }
            }
        });
    }

    function loadModels() {
        const brandId = getBrandIdFromName($('#brandFilter').val());
        const categoryId = getCategoryIdFromName($('#categoryFilter').val());
        
        $.ajax({
            url: '@Url.Action("GetModels", "POS")',
            type: 'GET',
            data: { 
                brandId: brandId, 
                categoryId: categoryId 
            },
            success: function(response) {
                if (response.success) {
                    const select = $('#modelFilter');
                    select.empty();
                    select.append('<option value="">All Models</option>');
                    
                    response.data.forEach(function(model) {
                        select.append(`<option value="${model.name}" data-id="${model.id}">${model.name}</option>`);
                    });
                }
            },
            error: function(xhr) {
                console.error('Error loading models:', xhr);
            }
        });
    }

    // Helper function to get brand ID from name
    function getBrandIdFromName(brandName) {
        if (!brandName) return null;
        const option = $('#brandFilter option:selected');
        // We need to store brand IDs, let's update loadBrands to include data-id
        return option.data('id') || null;
    }

    // Helper function to get category ID from name
    function getCategoryIdFromName(categoryName) {
        if (!categoryName) return null;
        const option = $('#categoryFilter option:selected');
        return option.data('id') || null;
    }

    function searchProducts() {
        const query = $('#searchInput').val();
        const brand = $('#brandFilter').val();
        const category = $('#categoryFilter').val();
        const model = $('#modelFilter').val();

        $.ajax({
            url: '@Url.Action("SearchItems", "POS")',
            type: 'GET',
            data: { 
                query: query,
                type: currentFilter
            },
            success: function(response) {
                if (response.success) {
                    products = response.data;
                    
                    // Apply additional filters
                    let filteredProducts = products;
                    if (brand) {
                        filteredProducts = filteredProducts.filter(p => p.Brand === brand);
                    }
                    if (category) {
                        filteredProducts = filteredProducts.filter(p => p.Category === category);
                    }
                    if (model) {
                        filteredProducts = filteredProducts.filter(p => p.Name && p.Name.includes(model));
                    }
                    
                    displayProducts(filteredProducts);
                }
            },
            error: function(xhr) {
                console.error('Error searching products:', xhr);
            }
        });
    }

    function displayProducts(products) {
        const container = $('#productsContainer');
        container.empty();

        if (products.length === 0) {
            container.html(`
                <div class="no-products">
                    <i class="fas fa-inbox"></i>
                    <p>No products found</p>
                </div>
            `);
            return;
        }

        products.forEach(function(product) {
            const typeColors = {
                'Device': 'primary',
                'Inventory': 'success',
                'Repair': 'warning'
            };

            const typeIcons = {
                'Device': 'mobile-alt',
                'Inventory': 'box',
                'Repair': 'wrench'
            };

            const card = $(`
                <div class="product-card" onclick='addToCart(${JSON.stringify(product)})'>
                    <div class="product-card-header">
                        <div class="product-name">${product.Name}</div>
                        <span class="badge bg-${typeColors[product.Type]} product-type-badge">
                            <i class="fas fa-${typeIcons[product.Type]} me-1"></i>${product.Type}
                        </span>
                    </div>
                    <div class="product-description">${product.Description}</div>
                    <div class="product-footer">
                        <div class="product-price">$${product.Price.toFixed(2)}</div>
                        <div class="product-stock">
                            ${product.Type === 'Inventory' ? `Stock: ${product.Stock}` : ''}
                            ${product.IMEI ? `IMEI: ${product.IMEI}` : ''}
                            ${product.RepairNumber ? `#${product.RepairNumber}` : ''}
                        </div>
                    </div>
                </div>
            `);

            container.append(card);
        });
    }

    function filterByType(type) {
        currentFilter = type;
        
        // Update active tab
        $('.filter-tab').removeClass('active');
        $(`.filter-tab[data-type="${type}"]`).addClass('active');
        
        searchProducts();
    }

    function addToCart(product) {
        // Check if item already in cart
        const existingIndex = cart.findIndex(item => item.Id === product.Id);
        
        if (existingIndex >= 0) {
            // Increase quantity for inventory items
            if (product.Type === 'Inventory') {
                cart[existingIndex].quantity++;
            } else {
                alert('This item is already in the cart');
                return;
            }
        } else {
            cart.push({
                Id: product.Id,
                Type: product.Type,
                Name: product.Name,
                Description: product.Description,
                Price: product.Price,
                OriginalPrice: product.Price,
                quantity: 1,
                ReferenceId: parseInt(product.Id.split('_')[1])
            });
        }

        updateCart();
    }

    function removeFromCart(index) {
        cart.splice(index, 1);
        updateCart();
    }

    function updateQuantity(index, delta) {
        const item = cart[index];
        
        if (item.Type !== 'Inventory') {
            alert('Quantity can only be changed for inventory items');
            return;
        }

        item.quantity += delta;
        
        if (item.quantity < 1) {
            item.quantity = 1;
        }

        updateCart();
    }

    function updatePrice(index, newPrice) {
        cart[index].Price = parseFloat(newPrice) || 0;
        updateCart();
    }

    function updateCart() {
        const container = $('#cartItems');
        container.empty();

        if (cart.length === 0) {
            container.html(`
                <div class="empty-cart">
                    <i class="fas fa-shopping-cart"></i>
                    <p>Cart is empty<br><small>Add items to get started</small></p>
                </div>
            `);
            $('#cartCount').text('0');
        } else {
            cart.forEach(function(item, index) {
                const itemTotal = item.Price * item.quantity;
                const priceChanged = item.Price !== item.OriginalPrice;

                const cartItem = $(`
                    <div class="cart-item">
                        <div class="cart-item-header">
                            <div class="cart-item-name">
                                ${item.Name}
                                <br><small class="text-muted">${item.Description}</small>
                            </div>
                            <span class="cart-item-remove" onclick="removeFromCart(${index})">
                                <i class="fas fa-times"></i>
                            </span>
                        </div>
                        <div class="cart-item-details">
                            ${item.Type === 'Inventory' ? `
                                <div class="cart-item-quantity">
                                    <button class="qty-btn" onclick="updateQuantity(${index}, -1)">-</button>
                                    <span>${item.quantity}</span>
                                    <button class="qty-btn" onclick="updateQuantity(${index}, 1)">+</button>
                                </div>
                            ` : `<div><span class="badge bg-secondary">Qty: 1</span></div>`}
                            <div>
                                $<input type="number" class="price-input" value="${item.Price.toFixed(2)}" 
                                    onchange="updatePrice(${index}, this.value)" step="0.01" min="0">
                                ${priceChanged ? '<br><small class="text-muted">Was: $' + item.OriginalPrice.toFixed(2) + '</small>' : ''}
                            </div>
                        </div>
                        <div class="text-end mt-2">
                            <strong>Total: $${itemTotal.toFixed(2)}</strong>
                        </div>
                    </div>
                `);

                container.append(cartItem);
            });

            $('#cartCount').text(cart.length);
        }

        updateSummary();
    }

    function updateSummary() {
        const subtotal = cart.reduce((sum, item) => sum + (item.Price * item.quantity), 0);
        const taxRate = 0; // 0% tax, can be changed
        const tax = subtotal * taxRate;
        const discount = 0; // Can add discount functionality
        const total = subtotal + tax - discount;

        $('#subtotal').text('$' + subtotal.toFixed(2));
        $('#tax').text('$' + tax.toFixed(2));
        $('#discount').text('$' + discount.toFixed(2));
        $('#total').text('$' + total.toFixed(2));
    }

    function clearCart() {
        if (cart.length === 0) return;
        
        if (confirm('Are you sure you want to clear the cart?')) {
            cart = [];
            updateCart();
        }
    }

    function completeSale() {
        // Validation
        if (cart.length === 0) {
            alert('Cart is empty. Please add items first.');
            return;
        }

        const customerId = $('#customerSelect').val();
        if (!customerId) {
            alert('Please select a customer');
            $('#customerSelect').focus();
            return;
        }

        const paymentMethod = $('#paymentMethod').val();

        // Calculate totals
        const subtotal = cart.reduce((sum, item) => sum + (item.Price * item.quantity), 0);
        const taxAmount = 0;
        const discountAmount = 0;
        const totalAmount = subtotal + taxAmount - discountAmount;

        // Prepare sale data
        const saleData = {
            CustomerId: parseInt(customerId),
            Items: cart.map(item => ({
                ItemType: item.Type,
                ItemReferenceId: item.ReferenceId,
                Description: item.Name,
                Quantity: item.quantity,
                UnitPrice: item.Price,
                OriginalPrice: item.OriginalPrice,
                DiscountAmount: 0
            })),
            SubTotal: subtotal,
            TaxAmount: taxAmount,
            DiscountAmount: discountAmount,
            TotalAmount: totalAmount,
            PaymentMethod: paymentMethod
        };

        // Submit sale
        $.ajax({
            url: '@Url.Action("CompleteSale", "POS")',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(saleData),
            success: function(response) {
                if (response.success) {
                    $('#invoiceNumber').text(response.invoiceNumber);
                    $('#successModal').modal('show');
                    
                    // Clear cart
                    cart = [];
                    updateCart();
                    
                    // Reset customer and payment method
                    $('#customerSelect').val('');
                    $('#paymentMethod').val('Cash');
                } else {
                    alert('Error: ' + response.message);
                }
            },
            error: function(xhr) {
                console.error('Error completing sale:', xhr);
                alert('Error completing sale. Please try again.');
            }
        });
    }

    function printInvoice() {
        // TODO: Implement invoice printing
        alert('Invoice printing will be implemented');
    }
</script>

